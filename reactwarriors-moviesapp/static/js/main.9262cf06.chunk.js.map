{"version":3,"sources":["MovieItem.js","MovieTabs.js","App.js","utils/api.js","serviceWorker.js","index.js"],"names":["MovieItem","state","willWatch","this","props","movie","addMovieToWillWatch","removeMovie","removeMovieFromWillWatch","className","src","backdrop_path","poster_path","alt","title","vote_average","type","onClick","setState","bind","React","Component","MovieTabs","sort_by","updateSortBy","App","nextPage","page","prevPage","limiter","console","log","alert","getMovies","fetch","then","response","json","data","movies","results","updateMovies","filter","item","id","updateMoviesWillWatch","moviesWillWatch","value","prevProps","prevState","map","key","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9262cf06.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass MovieItem extends React.Component {\r\n\t  constructor() {\r\n    super()\r\n\r\n    this.state = {\r\n    \twillWatch: false\r\n    }\r\n  }\r\n\trender() {\r\n\t\t\t\r\n\tconst {movie, removeMovie, addMovieToWillWatch, removeMovieFromWillWatch} = this.props;\r\n\treturn (\r\n        <div className = \"card\">\r\n        <img className = \"card-img-top\" src = {`https://image.tmdb.org/t/p/w500${movie.backdrop_path || movie.poster_path}`} alt = \"\" />\r\n        {/*<img className = \"card-img-top\" src = {movie.image} alt = \"\" /> */} \r\n        {/*<img className = \"card-img-top\" src = {movie.poster_path} alt = \"\" /> */}\r\n        <div className = \"card-body\">\r\n        <h6 className = \"card-title\">{movie.title}</h6>\r\n        <div className = \"d-flex justify-content-between align-items-center\">\r\n        <p className = \"nb-0\">Raiting: {movie.vote_average}</p>\r\n        {this.state.willWatch ? (\r\n        \t<button type = \"button\" className = \"btn btn-success\"\r\n        \tonClick = {() => {\r\n        \t\tthis.setState({ willWatch: false });\r\n        \t\tremoveMovieFromWillWatch(movie) }}\t>Remove Will Watch </button> ) : (\r\n        \t<button type = \"button\" className = \"btn btn-secondary\" \r\n        \tonClick = {() => {\r\n        \t\tthis.setState({ willWatch: true });\r\n        \t\taddMovieToWillWatch(movie) }} >Add Will Watch</button>        \r\n        )}\r\n        \r\n        </div>\r\n        <button onClick = {this.props.removeMovie.bind(this, movie)}>Delete Movie</button>\r\n        </div>\r\n        </div>\r\n\t);\r\n\r\n\t}\r\n}\r\n\r\nexport default MovieItem;","import React from 'react'\r\n\r\nconst MovieTabs = props => {\r\n\tconst {sort_by, updateSortBy} = props;\r\n\treturn (\r\n\t\t<ul className = \"tabs nav nav-pills\">\r\n\t\t<li className = \"nav-item\">\r\n\t\t<div className = {`nav-link ${sort_by ==='popularity.desc' ? 'active' : ''}`}\r\n\t\tonClick ={() => {\r\n\t\t\tupdateSortBy('popularity.desc');\r\n\t\t}}\r\n\t\t>\r\n\t\tPopularity</div>\r\n\t\t</li>\r\n\t\t<li className = \"nav-item\">\r\n\t\t<div className = {`nav-link ${sort_by ==='revenue.desc' ? 'active' : ''}`}\r\n\t\tonClick ={() => {\r\n\t\t\tupdateSortBy('revenue.desc');\r\n\t\t}}\r\n\t\t>\r\n\t\tREvenue</div>\r\n\t\t</li>\r\n\t\t<li className = \"nav-item\">\r\n\t\t<div className = {`nav-link ${sort_by ==='vote_average.desc' ? 'active' : ''}`}\r\n\t\tonClick ={() => {\r\n\t\t\tupdateSortBy('vote_average.desc');\r\n\t\t}}\r\n\t\t>\r\n\t\tVote average</div>\r\n\t\t</li>\r\n\t\t</ul>\r\n\t\t)\r\n}\r\n\r\nexport default MovieTabs\r\n","import React from \"react\";\nimport './App.css';\n//import moviesData from './moviesData.js';\nimport { API_URL, API_KEY_3 } from \"./utils/api.js\";\nimport MovieItem from \"./MovieItem.js\";\nimport MovieTabs from \"./MovieTabs.js\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      //movies: moviesData,\n      movies: [],\n      moviesWillWatch: [],\n      sort_by: \"popularity.desc\",\n      page: 1\n    };\n  }\n\n  /////// for API\n  //ComponentDidMount - for initialize data (view)\n  componentDidMount() {\n    console.log(\"didMount\");\n    //fetch('https://api.themoviedb.org/3/discover/movie?api_key=32044039455e2188ce91364820cf17a3')\n    this.getMovies();\n  }\n  /////\n\n  //Switcher\n  //switchPage = page => {\n  //const nextPage = [...this.state.moviesNextPage, page++];\n  //this.setState({\n  //moviesNextPage: nextPage\n  //})\n  //console.log(moviesNextPage);\n  //}\n\n  nextPage = () => {\n    this.setState({\n      page: this.state.page + 1\n    });\n  };\n\n  prevPage = () => {\n    this.setState({\n      page: this.state.page - 1\n    },\n    () => {\n      this.limiter();\n    }\n    );\n    console.log(\"prev\", this.state.page);\n  };\n\n  limiter = () => {\n    if (this.state.page === 0) {\n      alert(\"No more pages\");\n    }\n  };\n\n  getMovies = () => {\n    fetch(\n      `${API_URL}/discover/movie?api_key=${API_KEY_3}&sort_by=${\n        this.state.sort_by\n      }&page=${this.state.page}`\n    )\n      .then(response => {\n        console.log(\"then\");\n        return response.json();\n      })\n      .then(data => {\n        console.log(\"data\", data);\n        this.setState({\n          //http://i.piccy.info/i9/c9535f24d31eb2ff5fdbbc9de0ef55ac/1583765514/68670/1366598/dataresults.jpg\n          movies: data.results,\n          page: data.page\n        });\n      });\n  };\n\n  removeMovie = movie => {\n    const updateMovies = this.state.movies.filter(function(item) {\n      return item.id !== movie.id;\n    });\n    console.log(updateMovies);\n    this.setState({\n      movies: updateMovies\n    });\n  };\n\n  addMovieToWillWatch = movie => {\n    const updateMoviesWillWatch = [...this.state.moviesWillWatch, movie];\n    this.setState({\n      moviesWillWatch: updateMoviesWillWatch\n    });\n  };\n\n  removeMovieFromWillWatch = movie => {\n    const updateMoviesWillWatch = this.state.moviesWillWatch.filter(function(\n      item\n    ) {\n      return item.id !== movie.id;\n    });\n    this.setState({\n      moviesWillWatch: updateMoviesWillWatch\n    });\n  };\n\n  updateSortBy = value => {\n    this.setState({\n      sort_by: value\n    });\n  };\n\n  //for updating state\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"didUpdate\");\n    console.log(\"prev\", prevProps, prevState);\n    console.log(\"this\", this.props, this.state);\n    if (\n      prevState.sort_by !== this.state.sort_by ||\n      prevState.page !== this.state.page\n    ) {\n      console.log(\"call api\");\n      this.getMovies();\n    }\n  }\n\n  render() {\n    console.log(\"render\", this.state.sort_by);\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-6\">\n            <div className=\"row mb-4 mt-4\">\n              <MovieTabs\n                sort_by={this.state.sort_by}\n                updateSortBy={this.updateSortBy}\n              />\n            </div>\n            {this.state.movies.map(movie => {\n              return (\n                <MovieItem\n                  key={movie.id}\n                  movie={movie}\n                  removeMovie={this.removeMovie}\n                  addMovieToWillWatch={this.addMovieToWillWatch}\n                  removeMovieFromWillWatch={this.removeMovieFromWillWatch}\n                />\n              );\n            })}\n            <div>\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                onClick={this.prevPage}\n              >\n                Previous Page\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                onClick={this.nextPage}\n              >\n                Next Page\n              </button>\n            </div>\n          </div>\n          <div className=\"col-3\">\n            <p>Will Watch: {this.state.moviesWillWatch.length} </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const API_URL = \"https://api.themoviedb.org/3\";\r\n\r\nexport const API_KEY_3 = \"32044039455e2188ce91364820cf17a3\";\r\n\r\nexport const API_KEY_4 =\r\n  \"eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzMjA0NDAzOTQ1NWUyMTg4Y2U5MTM2NDgyMGNmMTdhMyIsInN1YiI6IjVjNTU5NjNiMGUwYTI2MDUwNmM2NjNjNyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.n82zSQteMJ3rKEVFR6nlY9hQwzthOIf74fZZ4LSn-1g\";\r\n//export const PAGE = \"https://api.themoviedb.org/3/discover/movie?page=2\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}